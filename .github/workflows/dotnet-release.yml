# 
# Purpose: Create GitHub Release containing source code
#
# Permissions: Requires the following permissions
#              * contents: write
#

name: dotnet-release

on:
  workflow_call:

env:
  BUILD_OUTPUT_PATH: './output'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      # Required to publish release artifacts
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # https://github.com/PaulHatch/semantic-version#important-note-regarding-the-checkout-action
          fetch-depth: 0

      - uses: paulhatch/semantic-version@8d3552d38408b608e90e76237a2a5ac9fe524d04  # v5.3.0
        id: sem-ver
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ""
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ""
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If bump_each_commit is also set to true, setting this value will cause the version to increment only if the pattern specified is matched.
          bump_each_commit_patch_pattern: ""
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"
          # Prevents pre-v1.0.0 version from automatically incrementing the major version.
          # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
          enable_prerelease_mode: false
          # If enabled, diagnostic information will be added to the action output.
          debug: false

      - name: Publish release
        shell: bash
        run: |
          gh release create ${{ steps.sem-ver.outputs.version }} --title ${{ steps.sem-ver.outputs.version }} --generate-notes
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # - name: Publish release
      #   shell: bash
      #   run: |
      #     version=v$(date +'%-Y.%-m.%-d').${{ github.run_number }}
      #     gh release create ${version} --title ${version} --generate-notes
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}